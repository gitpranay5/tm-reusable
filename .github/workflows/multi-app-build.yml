# This is a multi-language build workflow that reads service configurations file
name: Multi Language Build from Config

on:
  workflow_call:
    inputs:
      service_config_file:
        required: true
        type: string

jobs:
  # 1. Read service names from config file
  get-services:
    runs-on: ubuntu-latest
    outputs:
      c_services: ${{ steps.extract.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Extract service names from service config file
        id: extract
        run: |
          services=$(yq e '.services | keys' ${{ inputs.service_config_file }} | yq e -o=json - | tr -d '\n')
          echo "services=$services"
          echo "services=$services" >> $GITHUB_OUTPUT
      
      - name: Detect changed or new services
        id: detect
        run: |
          if git diff --name-only HEAD~1 HEAD -- service-config.yml | grep -q .; then

            # Compare and extract only changed service names
            services=$(git diff HEAD~1 HEAD -- service-config.yml \
              | grep '^[+-]' \
              | grep -v '^[+-]\s*#' \
              | awk '
                /^[+-]?services:/ { in_services=1; next }

                # Match service definitions (line starts with +/- and two spaces, then key ending with colon)
                in_services && match($0, /^[+-]\s{2}([a-zA-Z0-9_-]+):/, m) {
                  current_service=m[1]
                  print current_service
                  next
                }

                # Match property change under a service (starts with +/- and 4 spaces)
                in_services && /^[+-]\s{4}/ && current_service != "" {
                  print current_service
                }
              ' \
              | sort -u \
              | jq -R -s -c 'split("\n")[:-1]')

            echo "c_services=$services"
            echo "c_services=$services" >> $GITHUB_OUTPUT
          else
            echo "c_services=${{ steps.extract.outputs.services }}" >> $GITHUB_OUTPUT
          fi


  # 2. Matrix build based on extracted service list and build for the services
  get-service-values-build:
    runs-on: ubuntu-latest
    needs: get-services
    outputs:
      language: ${{ steps.config.outputs.language }}
      version: ${{ steps.config.outputs.version }}
      project_dir: ${{ steps.config.outputs.project_dir }}
      build_file: ${{ steps.config.outputs.build_file }}
    strategy:
      matrix:
        service: ${{ fromJSON(needs.get-services.outputs.c_services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Config Values
        id: config
        uses: gitpranay5/tm-reusable/actions/get-service-config-values@feat
        with:
          service_config_file: ${{ inputs.service_config_file }}
          service_name: ${{ matrix.service }}
    
      - name: Build java Project
        if: ${{ steps.config.outputs.language == 'java' }}
        uses: gitpranay5/tm-reusable/actions/general-java-build@feat
        with:
          java_version: ${{ steps.config.outputs.version }}
          project_dir: ${{ steps.config.outputs.project_dir }}
          build_file: ${{ steps.config.outputs.build_file }}

      - name: Build Python Project
        if: ${{ steps.config.outputs.language == 'python' }}
        uses: gitpranay5/tm-reusable/actions/general-python-build@feat
        with:
          python_version: ${{ steps.config.outputs.version }}
          project_dir: ${{ steps.config.outputs.project_dir }}
          build_file: ${{ steps.config.outputs.build_file }}

      - name: Build Node.js Project
        if: ${{ steps.config.outputs.language == 'node.js' }}
        uses: gitpranay5/tm-reusable/actions/general-node-build@feat
        with:
          node_version: ${{ steps.config.outputs.version }}
          project_dir: ${{ steps.config.outputs.project_dir }}
          build_file: ${{ steps.config.outputs.build_file }}